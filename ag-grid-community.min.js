// AG-Grid Community Edition - Local fallback
// Simplified version for local use
window.agGrid = {
  Grid: function(element, options) {
    this.element = element;
    this.options = options;
    this.api = {
      setRowData: (data) => this.setRowData(data),
      forEachNode: (callback) => this.forEachNode(callback)
    };
    this.rowData = [];
    this.init();
  }
};

window.agGrid.Grid.prototype = {
  init: function() {
    this.render();
  },
  
  setRowData: function(data) {
    this.rowData = data || [];
    this.render();
  },
  
  forEachNode: function(callback) {
    this.rowData.forEach((data, index) => {
      callback({ data: data, rowIndex: index });
    });
  },
  
  render: function() {
    let html = '<table class="ag-table" style="width:100%;border-collapse:collapse;">';
    
    // ヘッダー行
    html += '<thead><tr>';
    this.options.columnDefs.forEach(col => {
      html += `<th style="border:1px solid #ddd;padding:8px;background:#f5f5f5;">${col.headerName || col.field}</th>`;
    });
    html += '</tr></thead>';
    
    // データ行
    html += '<tbody>';
    this.rowData.forEach((row, rowIndex) => {
      html += '<tr>';
      this.options.columnDefs.forEach((col, colIndex) => {
        const value = row[col.field] || '';
        const colSpan = col.colSpan ? col.colSpan({data: row}) : 1;
        const isEditable = col.editable ? 'contenteditable="true"' : '';
        const style = row.isHeader ? 'background-color:#f0f0f0;font-weight:bold;' : '';
        
        if (colIndex === 0 || colSpan === 1) {
          html += `<td ${colSpan > 1 ? `colspan="${colSpan}"` : ''} style="border:1px solid #ddd;padding:8px;${style}" ${isEditable} data-row="${rowIndex}" data-field="${col.field}">${value}</td>`;
        }
      });
      html += '</tr>';
    });
    html += '</tbody></table>';
    
    this.element.innerHTML = html;
    
    // 編集イベント追加
    if (this.options.onCellValueChanged) {
      this.element.addEventListener('blur', (e) => {
        if (e.target.hasAttribute('contenteditable')) {
          const rowIndex = parseInt(e.target.dataset.row);
          const field = e.target.dataset.field;
          const newValue = e.target.textContent;
          
          // データ更新
          if (this.rowData[rowIndex]) {
            this.rowData[rowIndex][field] = newValue;
            this.options.onCellValueChanged();
          }
        }
      }, true);
    }
  }
};